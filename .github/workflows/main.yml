name: Kittygram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          # Устанавливаем зависимости Django из папки backend
          pip install -r ./backend/requirements.txt

      - name: Test with flake8 and django tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          # Проверка кода на соответствие PEP8
          python -m flake8 backend/
          # Запуск тестов Django
          python -m pytest


# Сборка и пуш образа бэкенда
  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: mkisa23/kittygram_backend:latest
          no-cache: true

  # Сборка и пуш фронтенда
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: mkisa23/kittygram_frontend:latest
          no-cache: true

  # сборка и пуш образа веб-сервера
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: mkisa23/kittygram_gateway:latest
          no-cache: true

# деплой на сервер
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      # Подключаемся к серверу и выполняем скрипт
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd kittygram
            # Создаем .env файл и наполняем его секретами из GitHub
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            # Скачиваем свежие образы с Docker Hub
            sudo docker compose pull
            # Останавливаем и удаляем старые контейнеры
            sudo docker compose down
            # Запускаем новые контейнеры в фоновом режиме
            sudo docker compose up -d
            # Применяем миграции
            sudo docker compose exec backend python manage.py migrate
            # Собираем статику
            sudo docker compose exec backend python manage.py collectstatic
            sudo docker compose exec backend cp -r /app/static/. /app/static_volume/

  # Задание для отправки уведомления в Telegram
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Деплой проекта ${{ github.workflow }} успешно выполнен!
            Репозиторий: ${{ github.repository }}
            Коммит: ${{ github.sha }}
